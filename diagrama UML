@startuml
Estacionamento "1" *-- "*" Vaga : contém
Estacionamento "1" o-- "*" Veiculo : gerencia
Estacionamento "1" *-- "*" Usuario : gerencia
Estacionamento *-- Pagamento : gera
Vaga "1" o-- "0..1" Veiculo : pode conter
Tarifa "1" --* "*" Estacionamento : define o preço de 
Tarifa --> "1" Pagamento
Cliente "1" -- "*" Pagamento : realiza

class Cliente extends Usuario {

+realizarPagamento(veiculo: Veiculo): Pagamento
+visualizarRecibo(pagamento: Pagamento): String
}

class Funcionario extends Usuario {

#isAdmin : boolean


+cadastrarVeiculo(placa: String, modelo: String, tipo: String): Veiculo
+registrarEntrada(veiculo: Veiculo): void
+registrarSaida(veiculo: Veiculo): void
+modificarTarifa(novoValor: double): void
+visualizarRegistros(): List<Registro>

}

class Estacionamento {

-vagas: List<Vaga>
-veiculos: List<Veiculo>
-usuarios: List<Usuario>
-faturamento: double
-capacidade: int
- tarifa : Tarifa

+calcularVagasDisponiveis(): int
+registrarCliente(usuario: Usuario): void
+registrarFuncionario(admin : Funcionario, nome : String, login : Stirng, senha : String, isAdmin : boolean) : boolean
+mensagemEstacionamentoCheio(): void
-inicializarAdmin() : void
-inciializarVagas() : void
+adicionnarVeiculo(veiculo : Veiculo): void
+encontrarVeiculoPorPlaca(placa : String): Veiculo
+encontrarVagaDisponivel() : Vaga
+encontrarVagaPorNumero(numero : int) : Vaga
+calcularVagasDisponiveis() : int
}

class Veiculo {

- {static} inicioPrograma: LocalDateTime
- {static} inicioRealMillis : long
- {static} conversor : int
-placa: String
-modelo: String
-tipo: String
-horaEntrada: LocalDateTime
-horaSaida: LocalDateTime
-tarifaCalculada: double

+calcularTempoPermanencia(): int
+calcularTarifa(tarifa: Tarifa): double
+getTempoLogico()

}

class Vaga {

-numero: int
-ocupada: boolean
-veiculo: Veiculo 

+atribuirVeiculo(veiculo: Veiculo): void
+liberarVaga(): void
+estaDisponivel(): boolean

}

abstract class Usuario {

#nome: String
#login: String
#senha: String

+autenticar(login: String, senha: String): boolean

}

class Pagamento {

-valor: double
-data: LocalDateTime
-veiculo: Veiculo
-status: String

+registrarPagamento(): void
+emitirRecibo(): String

}


class Tarifa {

-valorPorHora: double
-fracaoMinimaHora: double

+calcularValor(tempoPermanencia: int): double

}

@enduml
